

const express = require('express');
const Joi = require('joi');
const logger = require('./logger')
const app = express();
const Joy = require('joi');
const morgan = require('morgan');
app.use(express.json());
app.use(express.static('public'))
if (app.get('env') === 'development') {
    app.use(morgan('tiny'))

}
app.use(logger)
const genres = [
    { id: 1, name: 'Action' },
    { id: 2, name: 'Horror' },
    { id: 3, name: 'Romance' },
];



app.get('/api/genres', (req, res) => {

    res.send(genres)

});

app.post('/api/genres', (req, res) => {


    const { error } = schema.validate(req.body);

    if (error) return res.status(400).send(error.details[0].message)

    const genre = {

        id: genres.length + 1,
        name: req.body.name
    }
    genres.push(genre);
    res.send(genre)
})
app.put('/api/genres/:id', (req, res) => {


    const { error } = schema.validate(req.body);

    if (error) return res.status(400).send(error.details[0].message)

    const genre = genres.find(g => g.id === parseInt(req.params.id))
    if (!genre) return res.status(404).send('the genre with the given ID was not found')

    genre.name = req.body.name

    res.send(genre);
})
app.delete('/api/genres/:id', (req, res) => {


    const genre = genres.find(g => g.id === parseInt(req.params.id))
    if (!genre) return res.status(404).send('the genre with the given ID was not found')
    const index = genres.indexOf(genre)

    genres.splice(index, 1)

    res.send(genre);
})
app.get('/api/genres/:id', (req, res) => {


    const genre = genres.find(g => g.id === parseInt(req.params.id))
    if (!genre) return res.status(404).send('the genre with the given ID was not found')


    res.send(genre);
})





const schema = Joi.object({
    name: Joi.string().min(3).required(),

});

const port = process.env.PORT || 3000


app.listen(port, () => console.log(`port running ${port}`))



